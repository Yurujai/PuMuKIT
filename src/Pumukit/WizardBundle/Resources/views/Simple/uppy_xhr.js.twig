const uppy = new Uppy.Core({
    autoProceed: false,
    allowMultipleUploads: false,
    debug: true,
    restrictions: {
        allowedFileTypes: ['audio/*','video/*']
    }
})

uppy.use(Uppy.Form, {
    target: formElement,
    getMetaFromForm: true,
    addResultToForm: true,
    multipleResults: false,
    submitOnSuccess: false,
    triggerUploadOnSubmit: false
})

uppy.use(Uppy.FileInput, {
    target: '.UppyForm',
    replaceTargetContent: true
})

uppy.use(Uppy.StatusBar, {
    target: '.UppyInput-Progress',
    hideUploadButton: true,
    hideAfterFinish: false
})

uppy.use(Uppy.XHRUpload, {
    endpoint: "{{ pathToUpload }}",
    formData: true,
    method: 'post',
    fieldName: 'resource[]',
    limit: 10,
    timeout: 1800
});

uppy.on('file-added', (file) => {
    $('.file-data').show();
    $('.file-title').html(file.name);

    var fileSize = (file.size / 1024 / 1024).toFixed(2);
    var fileSizeMessage = fileSize + ' MB';
    $('.file-size').html(fileSizeMessage);
})

uppy.on('upload-error', (file, error, response) => {
    if (error.isNetworkError) {
        alert(error)
        uppy.reset();
    }
})

uppy.on('restriction-failed', (file, error) => {
    alert(error);
    uppy.reset();
})
